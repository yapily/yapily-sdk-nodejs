/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountAuthorisationRequest from '../model/AccountAuthorisationRequest';
import ApiResponseError from '../model/ApiResponseError';
import ApiResponseOfAccountAuthorisationResponse from '../model/ApiResponseOfAccountAuthorisationResponse';
import ApiResponseOfEmbeddedAccountAuthorisationResponse from '../model/ApiResponseOfEmbeddedAccountAuthorisationResponse';
import ApiResponseOfPaymentAuthorisationRequestResponse from '../model/ApiResponseOfPaymentAuthorisationRequestResponse';
import ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse from '../model/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse';
import BulkPaymentAuthorisationRequest from '../model/BulkPaymentAuthorisationRequest';
import BulkPaymentEmbeddedAuthorisationRequest from '../model/BulkPaymentEmbeddedAuthorisationRequest';
import EmbeddedAccountAuthorisationRequest from '../model/EmbeddedAccountAuthorisationRequest';
import PaymentAuthorisationRequest from '../model/PaymentAuthorisationRequest';
import PaymentEmbeddedAuthorisationRequest from '../model/PaymentEmbeddedAuthorisationRequest';
import PaymentPreAuthorisationRequest from '../model/PaymentPreAuthorisationRequest';
import PreAuthorisationRequest from '../model/PreAuthorisationRequest';

/**
* Authorisations service.
* @module api/AuthorisationsApi
* @version 2.13.1
*/
export default class AuthorisationsApi {

    /**
    * Constructs a new AuthorisationsApi. 
    * @alias module:api/AuthorisationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBulkPaymentAuthorisation operation.
     * @callback module:api/AuthorisationsApi~createBulkPaymentAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfPaymentAuthorisationRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Bulk Payment Authorisation
     * Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_BULK_PAYMENT`
     * @param {module:model/BulkPaymentAuthorisationRequest} bulkPaymentAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~createBulkPaymentAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfPaymentAuthorisationRequestResponse}
     */
    createBulkPaymentAuthorisation(bulkPaymentAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = bulkPaymentAuthorisationRequest;
      // verify the required parameter 'bulkPaymentAuthorisationRequest' is set
      if (bulkPaymentAuthorisationRequest === undefined || bulkPaymentAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'bulkPaymentAuthorisationRequest' when calling createBulkPaymentAuthorisation");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfPaymentAuthorisationRequestResponse;
      return this.apiClient.callApi(
        '/bulk-payment-auth-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmbeddedBulkPaymentAuthorisation operation.
     * @callback module:api/AuthorisationsApi~createEmbeddedBulkPaymentAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Embedded Bulk Payment Authorisation
     * Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_BULK_PAYMENT` feature in order to obtain the the user's authorisation for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`
     * @param {module:model/BulkPaymentEmbeddedAuthorisationRequest} bulkPaymentEmbeddedAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~createEmbeddedBulkPaymentAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse}
     */
    createEmbeddedBulkPaymentAuthorisation(bulkPaymentEmbeddedAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = bulkPaymentEmbeddedAuthorisationRequest;
      // verify the required parameter 'bulkPaymentEmbeddedAuthorisationRequest' is set
      if (bulkPaymentEmbeddedAuthorisationRequest === undefined || bulkPaymentEmbeddedAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'bulkPaymentEmbeddedAuthorisationRequest' when calling createEmbeddedBulkPaymentAuthorisation");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse;
      return this.apiClient.callApi(
        '/embedded-bulk-payment-auth-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmbeddedPaymentAuthorisation operation.
     * @callback module:api/AuthorisationsApi~createEmbeddedPaymentAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Embedded Payment Authorisation
     * Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT` feature in order to obtain the the user's authorisation for a payment.<br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`
     * @param {module:model/PaymentEmbeddedAuthorisationRequest} paymentEmbeddedAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~createEmbeddedPaymentAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse}
     */
    createEmbeddedPaymentAuthorisation(paymentEmbeddedAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = paymentEmbeddedAuthorisationRequest;
      // verify the required parameter 'paymentEmbeddedAuthorisationRequest' is set
      if (paymentEmbeddedAuthorisationRequest === undefined || paymentEmbeddedAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'paymentEmbeddedAuthorisationRequest' when calling createEmbeddedPaymentAuthorisation");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse;
      return this.apiClient.callApi(
        '/embedded-payment-auth-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPaymentAuthorisation operation.
     * @callback module:api/AuthorisationsApi~createPaymentAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfPaymentAuthorisationRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Payment Authorisation
     * Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a payment. This endpoint is used to initiate all the different payment listed below. Based on the type of payment you wish to make, you may be required to provide specific properties in [PaymentRequest](https://docs.yapily.com/api/reference/#operation/createPaymentAuthorisation!path=paymentRequest&t=request). First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/reference/#operation/getInstitution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`INITIATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>
     * @param {module:model/PaymentAuthorisationRequest} paymentAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~createPaymentAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfPaymentAuthorisationRequestResponse}
     */
    createPaymentAuthorisation(paymentAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = paymentAuthorisationRequest;
      // verify the required parameter 'paymentAuthorisationRequest' is set
      if (paymentAuthorisationRequest === undefined || paymentAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'paymentAuthorisationRequest' when calling createPaymentAuthorisation");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfPaymentAuthorisationRequestResponse;
      return this.apiClient.callApi(
        '/payment-auth-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPaymentPreAuthorisationRequest operation.
     * @callback module:api/AuthorisationsApi~createPaymentPreAuthorisationRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfAccountAuthorisationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Payment Pre-authorisation
     * Used to initiate the pre-authorisation process for payments for CbiGlobe `Institution` that contains the `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS` feature to authenticate the user. <br><br>Feature: `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS`
     * @param {module:model/PaymentPreAuthorisationRequest} paymentPreAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~createPaymentPreAuthorisationRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfAccountAuthorisationResponse}
     */
    createPaymentPreAuthorisationRequest(paymentPreAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = paymentPreAuthorisationRequest;
      // verify the required parameter 'paymentPreAuthorisationRequest' is set
      if (paymentPreAuthorisationRequest === undefined || paymentPreAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'paymentPreAuthorisationRequest' when calling createPaymentPreAuthorisationRequest");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfAccountAuthorisationResponse;
      return this.apiClient.callApi(
        '/payment-pre-auth-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPreAuthorisationRequest operation.
     * @callback module:api/AuthorisationsApi~createPreAuthorisationRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfAccountAuthorisationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Pre-authorisation
     * Used to initiate the pre-authorisation process for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature to authenticate the user. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`
     * @param {module:model/PreAuthorisationRequest} preAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~createPreAuthorisationRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfAccountAuthorisationResponse}
     */
    createPreAuthorisationRequest(preAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = preAuthorisationRequest;
      // verify the required parameter 'preAuthorisationRequest' is set
      if (preAuthorisationRequest === undefined || preAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'preAuthorisationRequest' when calling createPreAuthorisationRequest");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfAccountAuthorisationResponse;
      return this.apiClient.callApi(
        '/pre-auth-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateAccountRequest operation.
     * @callback module:api/AuthorisationsApi~initiateAccountRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfAccountAuthorisationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Account Authorisation
     * Used to initiate the authorisation process and direct users to the login screen of their financial institution in order to give consent to access account data.<br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_ACCOUNT_REQUEST`
     * @param {module:model/AccountAuthorisationRequest} accountAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~initiateAccountRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfAccountAuthorisationResponse}
     */
    initiateAccountRequest(accountAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = accountAuthorisationRequest;
      // verify the required parameter 'accountAuthorisationRequest' is set
      if (accountAuthorisationRequest === undefined || accountAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'accountAuthorisationRequest' when calling initiateAccountRequest");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfAccountAuthorisationResponse;
      return this.apiClient.callApi(
        '/account-auth-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateEmbeddedAccountRequest operation.
     * @callback module:api/AuthorisationsApi~initiateEmbeddedAccountRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfEmbeddedAccountAuthorisationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Embedded Account Authorisation
     * Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_ACCOUNT_REQUEST` feature in order to obtain the the user's authorisation to access their account information. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`
     * @param {module:model/EmbeddedAccountAuthorisationRequest} embeddedAccountAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~initiateEmbeddedAccountRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfEmbeddedAccountAuthorisationResponse}
     */
    initiateEmbeddedAccountRequest(embeddedAccountAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = embeddedAccountAuthorisationRequest;
      // verify the required parameter 'embeddedAccountAuthorisationRequest' is set
      if (embeddedAccountAuthorisationRequest === undefined || embeddedAccountAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'embeddedAccountAuthorisationRequest' when calling initiateEmbeddedAccountRequest");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfEmbeddedAccountAuthorisationResponse;
      return this.apiClient.callApi(
        '/embedded-account-auth-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reAuthoriseAccount operation.
     * @callback module:api/AuthorisationsApi~reAuthoriseAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfAccountAuthorisationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-authorise Account Consent
     * Used to prompt the account holder for continued access to their financial data. This endpoint should be used when a `Consent` that was previously `AUTHORIZED` can no longer be used to retrieve data.<br><br>See [Re-Authorisation](https://docs.yapily.com/pages/key-concepts/account-data/account-consents/#re-authorisation) for more information.
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~reAuthoriseAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfAccountAuthorisationResponse}
     */
    reAuthoriseAccount(consent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling reAuthoriseAccount");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent,
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfAccountAuthorisationResponse;
      return this.apiClient.callApi(
        '/account-auth-requests', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmbeddedAccountRequest operation.
     * @callback module:api/AuthorisationsApi~updateEmbeddedAccountRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfEmbeddedAccountAuthorisationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Embedded Account Authorisation
     * Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to access the user's financial data. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`
     * @param {String} consentId __Mandatory__. The consent Id of the `Consent` to update.
     * @param {module:model/EmbeddedAccountAuthorisationRequest} embeddedAccountAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~updateEmbeddedAccountRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfEmbeddedAccountAuthorisationResponse}
     */
    updateEmbeddedAccountRequest(consentId, embeddedAccountAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = embeddedAccountAuthorisationRequest;
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling updateEmbeddedAccountRequest");
      }
      // verify the required parameter 'embeddedAccountAuthorisationRequest' is set
      if (embeddedAccountAuthorisationRequest === undefined || embeddedAccountAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'embeddedAccountAuthorisationRequest' when calling updateEmbeddedAccountRequest");
      }

      let pathParams = {
        'consentId': consentId
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfEmbeddedAccountAuthorisationResponse;
      return this.apiClient.callApi(
        '/embedded-account-auth-requests/{consentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmbeddedBulkPaymentAuthorisation operation.
     * @callback module:api/AuthorisationsApi~updateEmbeddedBulkPaymentAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Embedded Bulk Payment Authorisation
     * Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`
     * @param {String} consentId __Mandatory__. The consent Id of the `Consent` to update.
     * @param {module:model/BulkPaymentEmbeddedAuthorisationRequest} bulkPaymentEmbeddedAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~updateEmbeddedBulkPaymentAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse}
     */
    updateEmbeddedBulkPaymentAuthorisation(consentId, bulkPaymentEmbeddedAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = bulkPaymentEmbeddedAuthorisationRequest;
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling updateEmbeddedBulkPaymentAuthorisation");
      }
      // verify the required parameter 'bulkPaymentEmbeddedAuthorisationRequest' is set
      if (bulkPaymentEmbeddedAuthorisationRequest === undefined || bulkPaymentEmbeddedAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'bulkPaymentEmbeddedAuthorisationRequest' when calling updateEmbeddedBulkPaymentAuthorisation");
      }

      let pathParams = {
        'consentId': consentId
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse;
      return this.apiClient.callApi(
        '/embedded-bulk-payment-auth-requests/{consentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmbeddedPaymentAuthorisation operation.
     * @callback module:api/AuthorisationsApi~updateEmbeddedPaymentAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Embedded Payment Authorisation
     * Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a payment. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`
     * @param {String} consentId __Mandatory__. The consent Id of the `Consent` to update.
     * @param {module:model/PaymentEmbeddedAuthorisationRequest} paymentEmbeddedAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~updateEmbeddedPaymentAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse}
     */
    updateEmbeddedPaymentAuthorisation(consentId, paymentEmbeddedAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = paymentEmbeddedAuthorisationRequest;
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling updateEmbeddedPaymentAuthorisation");
      }
      // verify the required parameter 'paymentEmbeddedAuthorisationRequest' is set
      if (paymentEmbeddedAuthorisationRequest === undefined || paymentEmbeddedAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'paymentEmbeddedAuthorisationRequest' when calling updateEmbeddedPaymentAuthorisation");
      }

      let pathParams = {
        'consentId': consentId
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse;
      return this.apiClient.callApi(
        '/embedded-payment-auth-requests/{consentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePaymentAuthorisation operation.
     * @callback module:api/AuthorisationsApi~updatePaymentAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfPaymentAuthorisationRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Payment Pre-authorisation
     * Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to initiate a payment. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {module:model/PaymentAuthorisationRequest} paymentAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~updatePaymentAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfPaymentAuthorisationRequestResponse}
     */
    updatePaymentAuthorisation(consent, paymentAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = paymentAuthorisationRequest;
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling updatePaymentAuthorisation");
      }
      // verify the required parameter 'paymentAuthorisationRequest' is set
      if (paymentAuthorisationRequest === undefined || paymentAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'paymentAuthorisationRequest' when calling updatePaymentAuthorisation");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress'],
        'consent': consent
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfPaymentAuthorisationRequestResponse;
      return this.apiClient.callApi(
        '/payment-auth-requests', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePreAuthoriseAccountConsent operation.
     * @callback module:api/AuthorisationsApi~updatePreAuthoriseAccountConsentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfAccountAuthorisationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Account Pre-authorisation
     * Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to access account data. <br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow. <br><br>Features: <ul><li>`INITIATE_ACCOUNT_REQUEST`</li><li>`INITIATE_PRE_AUTHORISATION`</li></ul>
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {module:model/AccountAuthorisationRequest} accountAuthorisationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/AuthorisationsApi~updatePreAuthoriseAccountConsentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfAccountAuthorisationResponse}
     */
    updatePreAuthoriseAccountConsent(consent, accountAuthorisationRequest, opts, callback) {
      opts = opts || {};
      let postBody = accountAuthorisationRequest;
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling updatePreAuthoriseAccountConsent");
      }
      // verify the required parameter 'accountAuthorisationRequest' is set
      if (accountAuthorisationRequest === undefined || accountAuthorisationRequest === null) {
        throw new Error("Missing the required parameter 'accountAuthorisationRequest' when calling updatePreAuthoriseAccountConsent");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent,
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfAccountAuthorisationResponse;
      return this.apiClient.callApi(
        '/account-auth-requests', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
