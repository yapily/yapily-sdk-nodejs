/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountApiListResponse from '../model/AccountApiListResponse';
import ApiListResponseOfAccountStatement from '../model/ApiListResponseOfAccountStatement';
import ApiListResponseOfBeneficiary from '../model/ApiListResponseOfBeneficiary';
import ApiListResponseOfCategory from '../model/ApiListResponseOfCategory';
import ApiListResponseOfDirectDebitResponse from '../model/ApiListResponseOfDirectDebitResponse';
import ApiListResponseOfPaymentResponse from '../model/ApiListResponseOfPaymentResponse';
import ApiListResponseOfTransaction from '../model/ApiListResponseOfTransaction';
import ApiResponseError from '../model/ApiResponseError';
import ApiResponseOfAccount from '../model/ApiResponseOfAccount';
import ApiResponseOfAccountStatement from '../model/ApiResponseOfAccountStatement';
import ApiResponseOfBalances from '../model/ApiResponseOfBalances';
import ApiResponseOfIdentity from '../model/ApiResponseOfIdentity';
import SortEnum from '../model/SortEnum';

/**
* FinancialData service.
* @module api/FinancialDataApi
* @version 2.13.1
*/
export default class FinancialDataApi {

    /**
    * Constructs a new FinancialDataApi. 
    * @alias module:api/FinancialDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/FinancialDataApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account
     * Used to return the account and balance information for the end user associated with the presented consent token.<br><br>Feature: `ACCOUNTS`
     * @param {String} accountId __Mandatory__. The account Id of the user's bank account.
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfAccount}
     */
    getAccount(accountId, consent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccount");
      }
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getAccount");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent,
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfAccount;
      return this.apiClient.callApi(
        '/accounts/{accountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountBalances operation.
     * @callback module:api/FinancialDataApi~getAccountBalancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfBalances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Balances
     * Used to return the balance for the end user associated with the presented consent token.<br><br> __Note__: This endpoint is only for obtaining the balance information of an account belonging to an `Institution` that exposes their APIs through the [CBI Globe Gateway](https://docs.yapily.com/pages/knowledge/open-banking/cbi_globe//). If the `Institution` you wish to obtain balance data is not in the CBI Globe, use [Get Account](https://docs.yapily.com/api/reference/#operation/getAccount) or [Get Accounts](https://docs.yapily.com/api/reference/#operation/getAccounts) to get balance data. <br><br>Feature: `ACCOUNT_BALANCES` 
     * @param {String} accountId __Mandatory__. The account Id of the user's bank account.
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getAccountBalancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfBalances}
     */
    getAccountBalances(accountId, consent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountBalances");
      }
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getAccountBalances");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent,
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfBalances;
      return this.apiClient.callApi(
        '/accounts/{accountId}/balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountDirectDebits operation.
     * @callback module:api/FinancialDataApi~getAccountDirectDebitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfDirectDebitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Direct Debits
     * Used to get the list of direct debits for an account.<br><br>Feature: `ACCOUNT_DIRECT_DEBIT`
     * @param {String} accountId __Mandatory__. The account Id of the user's bank account.
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getAccountDirectDebitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfDirectDebitResponse}
     */
    getAccountDirectDebits(accountId, consent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountDirectDebits");
      }
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getAccountDirectDebits");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'limit': opts['limit'],
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiListResponseOfDirectDebitResponse;
      return this.apiClient.callApi(
        '/accounts/{accountId}/direct-debits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountPeriodicPayments operation.
     * @callback module:api/FinancialDataApi~getAccountPeriodicPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfPaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Periodic Payments
     * Used to get the list of periodic payments (standing orders in the UK) for an account.<br><br>Feature: `ACCOUNT_PERIODIC_PAYMENTS`
     * @param {String} accountId __Mandatory__. The account Id of the user's bank account.
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getAccountPeriodicPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfPaymentResponse}
     */
    getAccountPeriodicPayments(accountId, consent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountPeriodicPayments");
      }
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getAccountPeriodicPayments");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'limit': opts['limit'],
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiListResponseOfPaymentResponse;
      return this.apiClient.callApi(
        '/accounts/{accountId}/periodic-payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountScheduledPayments operation.
     * @callback module:api/FinancialDataApi~getAccountScheduledPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfPaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Scheduled Payments
     * Used to get the list of scheduled payments for an account.<br><br>Feature: `ACCOUNT_SCHEDULED_PAYMENT`
     * @param {String} accountId __Mandatory__. The account Id of the user's bank account.
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getAccountScheduledPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfPaymentResponse}
     */
    getAccountScheduledPayments(accountId, consent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountScheduledPayments");
      }
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getAccountScheduledPayments");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'limit': opts['limit'],
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiListResponseOfPaymentResponse;
      return this.apiClient.callApi(
        '/accounts/{accountId}/scheduled-payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccounts operation.
     * @callback module:api/FinancialDataApi~getAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountApiListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Accounts
     * Used to return all accounts and balances for the end user associated with the presented consent token.<br><br>Feature: `ACCOUNTS`
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountApiListResponse}
     */
    getAccounts(consent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent,
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = AccountApiListResponse;
      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBeneficiaries operation.
     * @callback module:api/FinancialDataApi~getBeneficiariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfBeneficiary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Beneficiaries
     * Used to get all the beneficiaries of a user's account<br><br>Feature: `ACCOUNT_BENEFICIARIES`
     * @param {String} accountId __Mandatory__. The account Id of the user's bank account.
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getBeneficiariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfBeneficiary}
     */
    getBeneficiaries(accountId, consent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getBeneficiaries");
      }
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getBeneficiaries");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiListResponseOfBeneficiary;
      return this.apiClient.callApi(
        '/accounts/{accountId}/beneficiaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategories operation.
     * @callback module:api/FinancialDataApi~getCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Categories
     * Used to retrieve the list of categories returned by the Yapily Categorisation engine for a given locale. <br><br>See [Data Enrichment](https://docs.yapily.com/pages/key-concepts/account-data/data-enrichment/intro-to-data-enrichment/) for more information.
     * @param {String} country __Mandatory__. The 2 letter country code e.g. 'GB'.
     * @param {module:api/FinancialDataApi~getCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfCategory}
     */
    getCategories(country, callback) {
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getCategories");
      }

      let pathParams = {
        'country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiListResponseOfCategory;
      return this.apiClient.callApi(
        '/categories/{country}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdentity operation.
     * @callback module:api/FinancialDataApi~getIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfIdentity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Identity
     * Used to get the identity information for an account.<br><br>Feature: `IDENTITY`
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfIdentity}
     */
    getIdentity(consent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfIdentity;
      return this.apiClient.callApi(
        '/identity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatement operation.
     * @callback module:api/FinancialDataApi~getStatementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfAccountStatement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Statement
     * Used to get a statement for an account.<br><br>Feature: `ACCOUNT_STATEMENT`
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {String} accountId __Mandatory__. The account Id of the user's bank account.
     * @param {String} statementId __Mandatory__. The statement Id of the statement file.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getStatementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfAccountStatement}
     */
    getStatement(consent, accountId, statementId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getStatement");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getStatement");
      }
      // verify the required parameter 'statementId' is set
      if (statementId === undefined || statementId === null) {
        throw new Error("Missing the required parameter 'statementId' when calling getStatement");
      }

      let pathParams = {
        'accountId': accountId,
        'statementId': statementId
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfAccountStatement;
      return this.apiClient.callApi(
        '/accounts/{accountId}/statements/{statementId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatementFile operation.
     * @callback module:api/FinancialDataApi~getStatementFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Statement File
     * Used to get the statement file for an account.<br><br>Feature: `ACCOUNT_STATEMENT_FILE`
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {String} accountId __Mandatory__. The account Id of the user's bank account.
     * @param {String} statementId __Mandatory__. The statement Id of the statement file.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getStatementFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getStatementFile(consent, accountId, statementId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getStatementFile");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getStatementFile");
      }
      // verify the required parameter 'statementId' is set
      if (statementId === undefined || statementId === null) {
        throw new Error("Missing the required parameter 'statementId' when calling getStatementFile");
      }

      let pathParams = {
        'accountId': accountId,
        'statementId': statementId
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/pdf', 'application/json;charset=UTF-8'];
      let returnType = File;
      return this.apiClient.callApi(
        '/accounts/{accountId}/statements/{statementId}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatements operation.
     * @callback module:api/FinancialDataApi~getStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfAccountStatement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Statements
     * Used to get the list of statements for an account.<br><br>Feature: `ACCOUNT_STATEMENTS`
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {String} accountId __Mandatory__. The account Id of the user's bank account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.from __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). 
     * @param {String} opts.before __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).
     * @param {Number} opts.limit __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.
     * @param {module:model/SortEnum} opts.sort __Optional__. Sort transaction records by date ascending with 'date' or descending with '-date'. The default sort order is descending
     * @param {Number} opts.offset __Optional__. The number of transaction records to be skipped. Used primarily with paginated results.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfAccountStatement}
     */
    getStatements(consent, accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getStatements");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getStatements");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'from': opts['from'],
        'before': opts['before'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiListResponseOfAccountStatement;
      return this.apiClient.callApi(
        '/accounts/{accountId}/statements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactions operation.
     * @callback module:api/FinancialDataApi~getTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Transactions
     * Used to get the account transactions for an account<br><br>Feature: `ACCOUNT_TRANSACTIONS`
     * @param {String} accountId __Mandatory__. The account Id of the user's bank account.
     * @param {String} consent __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.psuId __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuCorporateId __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {String} opts.psuIpAddress __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param {Array.<String>} opts._with __Optional__. Can be `categories` or `merchant`. When set, will include enrichment data in the transactions returned. <br><br>Enrichment data is optional, e.g. when 'merchant' enrichment data is requested, the enrichment response will include merchant data only if it can be evaluated from the transaction.
     * @param {String} opts.from __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). 
     * @param {String} opts.before __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).
     * @param {Number} opts.limit __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.
     * @param {module:model/SortEnum} opts.sort __Optional__. Sort transaction records by date ascending with 'date' or descending with '-date'. The default sort order is descending
     * @param {Number} opts.offset __Optional__. The number of transaction records to be skipped. Used primarily with paginated results.
     * @param {String} opts.cursor __Optional__. This property is not currently in use.
     * @param {Boolean} opts.raw __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
     * @param {module:api/FinancialDataApi~getTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfTransaction}
     */
    getTransactions(accountId, consent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getTransactions");
      }
      // verify the required parameter 'consent' is set
      if (consent === undefined || consent === null) {
        throw new Error("Missing the required parameter 'consent' when calling getTransactions");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'with': this.apiClient.buildCollectionParam(opts['_with'], 'multi'),
        'from': opts['from'],
        'before': opts['before'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'cursor': opts['cursor'],
        'raw': opts['raw']
      };
      let headerParams = {
        'consent': consent,
        'psu-id': opts['psuId'],
        'psu-corporate-id': opts['psuCorporateId'],
        'psu-ip-address': opts['psuIpAddress']
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiListResponseOfTransaction;
      return this.apiClient.callApi(
        '/accounts/{accountId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
