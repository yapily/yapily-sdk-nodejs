/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiListResponseOfEventSubscriptionResponse from '../model/ApiListResponseOfEventSubscriptionResponse';
import ApiResponseOfEventSubscriptionDeleteResponse from '../model/ApiResponseOfEventSubscriptionDeleteResponse';
import ApiResponseOfEventSubscriptionResponse from '../model/ApiResponseOfEventSubscriptionResponse';
import EventSubscriptionRequest from '../model/EventSubscriptionRequest';

/**
* Notifications service.
* @module api/NotificationsApi
* @version 2.13.1
*/
export default class NotificationsApi {

    /**
    * Constructs a new NotificationsApi. 
    * @alias module:api/NotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEventSubscription operation.
     * @callback module:api/NotificationsApi~createEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfEventSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Event Subscription
     * Used to subscribe to notifications relating to a specified event type.
     * @param {module:model/EventSubscriptionRequest} eventSubscriptionRequest 
     * @param {module:api/NotificationsApi~createEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfEventSubscriptionResponse}
     */
    createEventSubscription(eventSubscriptionRequest, callback) {
      let postBody = eventSubscriptionRequest;
      // verify the required parameter 'eventSubscriptionRequest' is set
      if (eventSubscriptionRequest === undefined || eventSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'eventSubscriptionRequest' when calling createEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfEventSubscriptionResponse;
      return this.apiClient.callApi(
        '/notifications/event-subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEventSubscriptionById operation.
     * @callback module:api/NotificationsApi~deleteEventSubscriptionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfEventSubscriptionDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Event Subscription
     * Used to unsubscribe to notifications relating to a specified event type.
     * @param {String} eventTypeId Unique identifier of the event type (for which notifications will be sent)
     * @param {module:api/NotificationsApi~deleteEventSubscriptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfEventSubscriptionDeleteResponse}
     */
    deleteEventSubscriptionById(eventTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'eventTypeId' is set
      if (eventTypeId === undefined || eventTypeId === null) {
        throw new Error("Missing the required parameter 'eventTypeId' when calling deleteEventSubscriptionById");
      }

      let pathParams = {
        'eventTypeId': eventTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfEventSubscriptionDeleteResponse;
      return this.apiClient.callApi(
        '/notifications/event-subscriptions/{eventTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventSubscriptionById operation.
     * @callback module:api/NotificationsApi~getEventSubscriptionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfEventSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Event Subscription
     * Used to get details of your subscription to a specified event type.
     * @param {String} eventTypeId Unique identifier of the event type (for which notifications will be sent)
     * @param {module:api/NotificationsApi~getEventSubscriptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfEventSubscriptionResponse}
     */
    getEventSubscriptionById(eventTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'eventTypeId' is set
      if (eventTypeId === undefined || eventTypeId === null) {
        throw new Error("Missing the required parameter 'eventTypeId' when calling getEventSubscriptionById");
      }

      let pathParams = {
        'eventTypeId': eventTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfEventSubscriptionResponse;
      return this.apiClient.callApi(
        '/notifications/event-subscriptions/{eventTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventSubscriptions operation.
     * @callback module:api/NotificationsApi~getEventSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfEventSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Event Subscriptions
     * Get all event subscriptions that your application is subscribed to
     * @param {module:api/NotificationsApi~getEventSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfEventSubscriptionResponse}
     */
    getEventSubscriptions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiListResponseOfEventSubscriptionResponse;
      return this.apiClient.callApi(
        '/notifications/event-subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
