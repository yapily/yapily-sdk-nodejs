/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiErrorResponse from '../model/ApiErrorResponse';
import ApiListResponseOfVirtualAccount from '../model/ApiListResponseOfVirtualAccount';
import ApiListResponseOfVirtualAccountBeneficiary from '../model/ApiListResponseOfVirtualAccountBeneficiary';
import ApiListResponseOfVirtualAccountClient from '../model/ApiListResponseOfVirtualAccountClient';
import ApiListResponseOfVirtualAccountPayment from '../model/ApiListResponseOfVirtualAccountPayment';
import ApiResponseOfVirtualAccount from '../model/ApiResponseOfVirtualAccount';
import ApiResponseOfVirtualAccountBeneficiary from '../model/ApiResponseOfVirtualAccountBeneficiary';
import ApiResponseOfVirtualAccountClient from '../model/ApiResponseOfVirtualAccountClient';
import ApiResponseOfVirtualAccountPayInDetails from '../model/ApiResponseOfVirtualAccountPayInDetails';
import ApiResponseOfVirtualAccountPayment from '../model/ApiResponseOfVirtualAccountPayment';
import UpdateVirtualAccountRequest from '../model/UpdateVirtualAccountRequest';
import VirtualAccountBeneficiaryRequest from '../model/VirtualAccountBeneficiaryRequest';
import VirtualAccountClientRequest from '../model/VirtualAccountClientRequest';
import VirtualAccountPayOutRequest from '../model/VirtualAccountPayOutRequest';
import VirtualAccountRequest from '../model/VirtualAccountRequest';
import VirtualAccountTransferRequest from '../model/VirtualAccountTransferRequest';

/**
* VirtualAccounts service.
* @module api/VirtualAccountsApi
* @version 2.13.1
*/
export default class VirtualAccountsApi {

    /**
    * Constructs a new VirtualAccountsApi. 
    * @alias module:api/VirtualAccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVirtualAccount operation.
     * @callback module:api/VirtualAccountsApi~createVirtualAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfVirtualAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Account
     * Create a new virtual account
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {module:model/VirtualAccountRequest} virtualAccountRequest 
     * @param {module:api/VirtualAccountsApi~createVirtualAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfVirtualAccount}
     */
    createVirtualAccount(clientId, virtualAccountRequest, callback) {
      let postBody = virtualAccountRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling createVirtualAccount");
      }
      // verify the required parameter 'virtualAccountRequest' is set
      if (virtualAccountRequest === undefined || virtualAccountRequest === null) {
        throw new Error("Missing the required parameter 'virtualAccountRequest' when calling createVirtualAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfVirtualAccount;
      return this.apiClient.callApi(
        '/virtual-accounts/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVirtualAccountBeneficiary operation.
     * @callback module:api/VirtualAccountsApi~createVirtualAccountBeneficiaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfVirtualAccountBeneficiary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Beneficiary
     * Create a new beneficiary (individual or business account) to which a Pay Out can be made. The beneficiary can be used from any virtual account that is held
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {module:model/VirtualAccountBeneficiaryRequest} virtualAccountBeneficiaryRequest 
     * @param {module:api/VirtualAccountsApi~createVirtualAccountBeneficiaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfVirtualAccountBeneficiary}
     */
    createVirtualAccountBeneficiary(clientId, virtualAccountBeneficiaryRequest, callback) {
      let postBody = virtualAccountBeneficiaryRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling createVirtualAccountBeneficiary");
      }
      // verify the required parameter 'virtualAccountBeneficiaryRequest' is set
      if (virtualAccountBeneficiaryRequest === undefined || virtualAccountBeneficiaryRequest === null) {
        throw new Error("Missing the required parameter 'virtualAccountBeneficiaryRequest' when calling createVirtualAccountBeneficiary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfVirtualAccountBeneficiary;
      return this.apiClient.callApi(
        '/virtual-accounts/beneficiaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVirtualAccountClient operation.
     * @callback module:api/VirtualAccountsApi~createVirtualAccountClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfVirtualAccountClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Virtual Account Client
     * Create a new virtual account client (individual or business client). Available for clients who have direct onboarding permissions only. Please contact your CSM to enquire about access
     * @param {String} clientId __Mandatory__. This must be your master / parent client-id (and not one associated with one of your clients)
     * @param {module:model/VirtualAccountClientRequest} virtualAccountClientRequest 
     * @param {module:api/VirtualAccountsApi~createVirtualAccountClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfVirtualAccountClient}
     */
    createVirtualAccountClient(clientId, virtualAccountClientRequest, callback) {
      let postBody = virtualAccountClientRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling createVirtualAccountClient");
      }
      // verify the required parameter 'virtualAccountClientRequest' is set
      if (virtualAccountClientRequest === undefined || virtualAccountClientRequest === null) {
        throw new Error("Missing the required parameter 'virtualAccountClientRequest' when calling createVirtualAccountClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfVirtualAccountClient;
      return this.apiClient.callApi(
        '/virtual-accounts/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVirtualAccountPayOut operation.
     * @callback module:api/VirtualAccountsApi~createVirtualAccountPayOutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfVirtualAccountPayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Pay Out
     * Initiate a payment from a specified virtual account to a previously added beneficiary using any of the schemes that it supports <br> When subscribed to virtualAccount.payOut.status notifications, further updates on payment processing status will be develivered asynchronously 
     * @param {String} idempotencyKey Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied 
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {module:model/VirtualAccountPayOutRequest} virtualAccountPayOutRequest 
     * @param {module:api/VirtualAccountsApi~createVirtualAccountPayOutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfVirtualAccountPayment}
     */
    createVirtualAccountPayOut(idempotencyKey, clientId, virtualAccountPayOutRequest, callback) {
      let postBody = virtualAccountPayOutRequest;
      // verify the required parameter 'idempotencyKey' is set
      if (idempotencyKey === undefined || idempotencyKey === null) {
        throw new Error("Missing the required parameter 'idempotencyKey' when calling createVirtualAccountPayOut");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling createVirtualAccountPayOut");
      }
      // verify the required parameter 'virtualAccountPayOutRequest' is set
      if (virtualAccountPayOutRequest === undefined || virtualAccountPayOutRequest === null) {
        throw new Error("Missing the required parameter 'virtualAccountPayOutRequest' when calling createVirtualAccountPayOut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': idempotencyKey,
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfVirtualAccountPayment;
      return this.apiClient.callApi(
        '/virtual-accounts/payments/pay-outs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVirtualAccountTransfer operation.
     * @callback module:api/VirtualAccountsApi~createVirtualAccountTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfVirtualAccountPayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Virtual Account Transfer
     * Create a transfer between two virtual accounts
     * @param {String} idempotencyKey Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied 
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {module:model/VirtualAccountTransferRequest} virtualAccountTransferRequest 
     * @param {module:api/VirtualAccountsApi~createVirtualAccountTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfVirtualAccountPayment}
     */
    createVirtualAccountTransfer(idempotencyKey, clientId, virtualAccountTransferRequest, callback) {
      let postBody = virtualAccountTransferRequest;
      // verify the required parameter 'idempotencyKey' is set
      if (idempotencyKey === undefined || idempotencyKey === null) {
        throw new Error("Missing the required parameter 'idempotencyKey' when calling createVirtualAccountTransfer");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling createVirtualAccountTransfer");
      }
      // verify the required parameter 'virtualAccountTransferRequest' is set
      if (virtualAccountTransferRequest === undefined || virtualAccountTransferRequest === null) {
        throw new Error("Missing the required parameter 'virtualAccountTransferRequest' when calling createVirtualAccountTransfer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': idempotencyKey,
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfVirtualAccountPayment;
      return this.apiClient.callApi(
        '/virtual-accounts/payments/transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayInDetails operation.
     * @callback module:api/VirtualAccountsApi~getPayInDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfVirtualAccountPayInDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Pay-In Details
     * Get the details of a pay-in transaction
     * @param {String} paymentId Uniquely identifies a transaction
     * @param {module:api/VirtualAccountsApi~getPayInDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfVirtualAccountPayInDetails}
     */
    getPayInDetails(paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling getPayInDetails");
      }

      let pathParams = {
        'paymentId': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfVirtualAccountPayInDetails;
      return this.apiClient.callApi(
        '/virtual-accounts/payments/{paymentId}/pay-in-details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentsById operation.
     * @callback module:api/VirtualAccountsApi~getPaymentsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfVirtualAccountPayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Payment
     * Get the details of a specific payment using its Id
     * @param {String} id __Mandatory__. The id of the payment
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {module:api/VirtualAccountsApi~getPaymentsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfVirtualAccountPayment}
     */
    getPaymentsById(id, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPaymentsById");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getPaymentsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfVirtualAccountPayment;
      return this.apiClient.callApi(
        '/virtual-accounts/payments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVirtualAccountBeneficiaries operation.
     * @callback module:api/VirtualAccountsApi~getVirtualAccountBeneficiariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfVirtualAccountBeneficiary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List Of Beneficiaries
     * Gets the list of beneficiaries (individual or business account) to which a Pay Out can be made.
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor __Optional__. Data required to provide pagination
     * @param {module:api/VirtualAccountsApi~getVirtualAccountBeneficiariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfVirtualAccountBeneficiary}
     */
    getVirtualAccountBeneficiaries(clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getVirtualAccountBeneficiaries");
      }

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor']
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiListResponseOfVirtualAccountBeneficiary;
      return this.apiClient.callApi(
        '/virtual-accounts/beneficiaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVirtualAccountBeneficiary operation.
     * @callback module:api/VirtualAccountsApi~getVirtualAccountBeneficiaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfVirtualAccountBeneficiary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Beneficiary
     * Get the details of a specific beneficiary (individual or business account) to which a Pay Out can be made from its id.
     * @param {String} beneficiaryId __Mandatory__. The Id of the requested beneficiary.
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {module:api/VirtualAccountsApi~getVirtualAccountBeneficiaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfVirtualAccountBeneficiary}
     */
    getVirtualAccountBeneficiary(beneficiaryId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'beneficiaryId' is set
      if (beneficiaryId === undefined || beneficiaryId === null) {
        throw new Error("Missing the required parameter 'beneficiaryId' when calling getVirtualAccountBeneficiary");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getVirtualAccountBeneficiary");
      }

      let pathParams = {
        'beneficiaryId': beneficiaryId
      };
      let queryParams = {
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfVirtualAccountBeneficiary;
      return this.apiClient.callApi(
        '/virtual-accounts/beneficiaries/{beneficiaryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVirtualAccountById operation.
     * @callback module:api/VirtualAccountsApi~getVirtualAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfVirtualAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account
     * Get the details of a specific account using its Id
     * @param {String} accountId __Mandatory__. The Id of the account.
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {module:api/VirtualAccountsApi~getVirtualAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfVirtualAccount}
     */
    getVirtualAccountById(accountId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getVirtualAccountById");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getVirtualAccountById");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfVirtualAccount;
      return this.apiClient.callApi(
        '/virtual-accounts/accounts/{accountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVirtualAccountClients operation.
     * @callback module:api/VirtualAccountsApi~getVirtualAccountClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfVirtualAccountClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of Virtual Account Clients
     * Get Virtual Account Clients (individual or business client).
     * @param {String} clientId __Mandatory__. This must be your master / parent client-id (and not one associated with one of your clients)
     * @param {Object} opts Optional parameters
     * @param {String} opts.type __Optional__.  Filter clients based on client type. One of BUSINESS or INDIVIDUAL
     * @param {String} opts.status __Optional__.  Filter clients based on client status. One of ACTIVE, PENDING or SUSPENDED
     * @param {String} opts.cursor __Optional__. Data required to provide pagination
     * @param {module:api/VirtualAccountsApi~getVirtualAccountClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfVirtualAccountClient}
     */
    getVirtualAccountClients(clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getVirtualAccountClients");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'status': opts['status'],
        'cursor': opts['cursor']
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiListResponseOfVirtualAccountClient;
      return this.apiClient.callApi(
        '/virtual-accounts/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVirtualAccountPayments operation.
     * @callback module:api/VirtualAccountsApi~getVirtualAccountPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfVirtualAccountPayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Payments
     * Retrieve a list of virtual account payments
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId __Optional__. Filter payments based on accountId
     * @param {Date} opts.createdDateTimeFrom __Optional__. Filter payments based on the createdDateTime
     * @param {Date} opts.createdDateTimeTo __Optional__. Filter payments based on the createdDateTime
     * @param {Array.<String>} opts.status __Optional__. Filter payments based on the payment status. One of INITIATED, PROCESSING, COMPLETED, FAILED
     * @param {Array.<String>} opts.type __Optional__. Filter payments based on the payment type. One of PAY_IN, PAY_OUT, RETURN_IN, RETURN_OUT
     * @param {String} opts.cursor __Optional__. Data required to provide pagination
     * @param {module:api/VirtualAccountsApi~getVirtualAccountPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfVirtualAccountPayment}
     */
    getVirtualAccountPayments(clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getVirtualAccountPayments");
      }

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'createdDateTimeFrom': opts['createdDateTimeFrom'],
        'createdDateTimeTo': opts['createdDateTimeTo'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'cursor': opts['cursor']
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiListResponseOfVirtualAccountPayment;
      return this.apiClient.callApi(
        '/virtual-accounts/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVirtualAccounts operation.
     * @callback module:api/VirtualAccountsApi~getVirtualAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfVirtualAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Accounts
     * Retrieve a list of all virtual accounts held
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {Object} opts Optional parameters
     * @param {String} opts.nickname __Optional__. Filter accounts based on reference provided in order to help with identification of the account
     * @param {String} opts.currency __Optional__. Filter accounts based on three-letter ISO 4217 currency code
     * @param {String} opts.status __Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED
     * @param {String} opts.cursor __Optional__. Data required to provide pagination
     * @param {module:api/VirtualAccountsApi~getVirtualAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfVirtualAccount}
     */
    getVirtualAccounts(clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getVirtualAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'nickname': opts['nickname'],
        'currency': opts['currency'],
        'status': opts['status'],
        'cursor': opts['cursor']
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiListResponseOfVirtualAccount;
      return this.apiClient.callApi(
        '/virtual-accounts/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVirtualAccountById operation.
     * @callback module:api/VirtualAccountsApi~updateVirtualAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfVirtualAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Account
     * Update the details of a specific account using its Id
     * @param {String} accountId __Mandatory__. The Id of the account.
     * @param {String} clientId __Mandatory__. The customer or sub-customer id for which the request will be done
     * @param {module:model/UpdateVirtualAccountRequest} updateVirtualAccountRequest 
     * @param {module:api/VirtualAccountsApi~updateVirtualAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfVirtualAccount}
     */
    updateVirtualAccountById(accountId, clientId, updateVirtualAccountRequest, callback) {
      let postBody = updateVirtualAccountRequest;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateVirtualAccountById");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateVirtualAccountById");
      }
      // verify the required parameter 'updateVirtualAccountRequest' is set
      if (updateVirtualAccountRequest === undefined || updateVirtualAccountRequest === null) {
        throw new Error("Missing the required parameter 'updateVirtualAccountRequest' when calling updateVirtualAccountById");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
        'client-id': clientId
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = ApiResponseOfVirtualAccount;
      return this.apiClient.callApi(
        '/virtual-accounts/accounts/{accountId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
