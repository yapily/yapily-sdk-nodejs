/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountBalance from './AccountBalance';
import AccountIdentification from './AccountIdentification';
import AccountName from './AccountName';
import AccountType from './AccountType';
import ConsolidatedAccountInformation from './ConsolidatedAccountInformation';
import UsageType from './UsageType';

/**
 * The Account model module.
 * @module model/Account
 * @version 2.13.1
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('usageType')) {
                obj['usageType'] = UsageType.constructFromObject(data['usageType']);
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = AccountType.constructFromObject(data['accountType']);
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('accountNames')) {
                obj['accountNames'] = ApiClient.convertToType(data['accountNames'], [AccountName]);
            }
            if (data.hasOwnProperty('accountIdentifications')) {
                obj['accountIdentifications'] = ApiClient.convertToType(data['accountIdentifications'], [AccountIdentification]);
            }
            if (data.hasOwnProperty('accountBalances')) {
                obj['accountBalances'] = ApiClient.convertToType(data['accountBalances'], [AccountBalance]);
            }
            if (data.hasOwnProperty('consolidatedAccountInformation')) {
                obj['consolidatedAccountInformation'] = ConsolidatedAccountInformation.constructFromObject(data['consolidatedAccountInformation']);
            }
        }
        return obj;
    }


}

/**
 * Unique identifier of the account.
 * @member {String} id
 */
Account.prototype['id'] = undefined;

/**
 * Specifies the type of account e.g. (BUSINESS_CURRENT).
 * @member {String} type
 */
Account.prototype['type'] = undefined;

/**
 * Product name as defined by the financial institution for this account
 * @member {String} description
 */
Account.prototype['description'] = undefined;

/**
 * Main / headline balance for the account. <br><br> Use of this field is recommended as fallback only. Instead, use of the typed balances (accountBalances) is recommended.
 * @member {Number} balance
 */
Account.prototype['balance'] = undefined;

/**
 * Currency the bank account balance is denoted in. <br><br> Specified as a 3-letter ISO 4217 currency code
 * @member {String} currency
 */
Account.prototype['currency'] = undefined;

/**
 * @member {module:model/UsageType} usageType
 */
Account.prototype['usageType'] = undefined;

/**
 * @member {module:model/AccountType} accountType
 */
Account.prototype['accountType'] = undefined;

/**
 * Nickname of the account that was provided by the account owner. <br><br> May be used to aid identification of the account.
 * @member {String} nickname
 */
Account.prototype['nickname'] = undefined;

/**
 * Supplementary specifications that might be provided by the Bank. These provide further characteristics about the account.
 * @member {String} details
 */
Account.prototype['details'] = undefined;

/**
 * @member {Array.<module:model/AccountName>} accountNames
 */
Account.prototype['accountNames'] = undefined;

/**
 * @member {Array.<module:model/AccountIdentification>} accountIdentifications
 */
Account.prototype['accountIdentifications'] = undefined;

/**
 * @member {Array.<module:model/AccountBalance>} accountBalances
 */
Account.prototype['accountBalances'] = undefined;

/**
 * @member {module:model/ConsolidatedAccountInformation} consolidatedAccountInformation
 */
Account.prototype['consolidatedAccountInformation'] = undefined;






export default Account;

