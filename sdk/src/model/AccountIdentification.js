/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountIdentificationType from './AccountIdentificationType';

/**
 * The AccountIdentification model module.
 * @module model/AccountIdentification
 * @version 2.13.1
 */
class AccountIdentification {
    /**
     * Constructs a new <code>AccountIdentification</code>.
     * @alias module:model/AccountIdentification
     * @param type {module:model/AccountIdentificationType} 
     * @param identification {String} __Mandatory__. The value associated with the account identification type.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on the format of the values.
     */
    constructor(type, identification) { 
        
        AccountIdentification.initialize(this, type, identification);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, identification) { 
        obj['type'] = type;
        obj['identification'] = identification;
    }

    /**
     * Constructs a <code>AccountIdentification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountIdentification} obj Optional instance to populate.
     * @return {module:model/AccountIdentification} The populated <code>AccountIdentification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountIdentification();

            if (data.hasOwnProperty('type')) {
                obj['type'] = AccountIdentificationType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('identification')) {
                obj['identification'] = ApiClient.convertToType(data['identification'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/AccountIdentificationType} type
 */
AccountIdentification.prototype['type'] = undefined;

/**
 * __Mandatory__. The value associated with the account identification type.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on the format of the values.
 * @member {String} identification
 */
AccountIdentification.prototype['identification'] = undefined;






export default AccountIdentification;

