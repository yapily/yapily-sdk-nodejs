/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstitutionError from './InstitutionError';

/**
 * The ErrorIssue model module.
 * @module model/ErrorIssue
 * @version 2.13.1
 */
class ErrorIssue {
    /**
     * Constructs a new <code>ErrorIssue</code>.
     * Detailed information regarding the issue that was experienced during processing of the request
     * @alias module:model/ErrorIssue
     * @param type {String} Category of the issue
     * @param code {String} Code that uniquely identifies the type of issue
     */
    constructor(type, code) { 
        
        ErrorIssue.initialize(this, type, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, code) { 
        obj['type'] = type;
        obj['code'] = code;
    }

    /**
     * Constructs a <code>ErrorIssue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorIssue} obj Optional instance to populate.
     * @return {module:model/ErrorIssue} The populated <code>ErrorIssue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorIssue();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('institutionError')) {
                obj['institutionError'] = InstitutionError.constructFromObject(data['institutionError']);
            }
        }
        return obj;
    }


}

/**
 * Category of the issue
 * @member {String} type
 */
ErrorIssue.prototype['type'] = undefined;

/**
 * Code that uniquely identifies the type of issue
 * @member {String} code
 */
ErrorIssue.prototype['code'] = undefined;

/**
 * Identfies the parameter / property within the request (headers, query parameters or body) that the issue relates to. For headers and query parameters, it refers to the parameter name. For the body, it refers to the JSONPath of the property
 * @member {String} parameter
 */
ErrorIssue.prototype['parameter'] = undefined;

/**
 * Human readable description of the issue that was experienced
 * @member {String} message
 */
ErrorIssue.prototype['message'] = undefined;

/**
 * @member {module:model/InstitutionError} institutionError
 */
ErrorIssue.prototype['institutionError'] = undefined;






export default ErrorIssue;

