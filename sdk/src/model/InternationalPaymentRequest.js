/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChargeBearerType from './ChargeBearerType';
import ExchangeRateInformation from './ExchangeRateInformation';
import PriorityCodeEnum from './PriorityCodeEnum';

/**
 * The InternationalPaymentRequest model module.
 * @module model/InternationalPaymentRequest
 * @version 2.13.1
 */
class InternationalPaymentRequest {
    /**
     * Constructs a new <code>InternationalPaymentRequest</code>.
     * __Conditional__. Used to specify properties to define an international payment. &lt;br&gt;&lt;br&gt;Must be specified when the payment &#x60;type&#x60; is one of the following:&lt;ul&gt;     &lt;li&gt;&lt;code&gt;INTERNATIONAL_SINGLE_PAYMENT&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;INTERNATIONAL_SCHEDULED_PAYMENT&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;INTERNATIONAL_PERIODIC_PAYMENT&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
     * @alias module:model/InternationalPaymentRequest
     * @param currencyOfTransfer {String} __Mandatory__. The 3-letter currency code for the currency of the payment to be transferred which can differ from the currency of the payer's account.
     */
    constructor(currencyOfTransfer) { 
        
        InternationalPaymentRequest.initialize(this, currencyOfTransfer);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currencyOfTransfer) { 
        obj['currencyOfTransfer'] = currencyOfTransfer;
    }

    /**
     * Constructs a <code>InternationalPaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InternationalPaymentRequest} obj Optional instance to populate.
     * @return {module:model/InternationalPaymentRequest} The populated <code>InternationalPaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InternationalPaymentRequest();

            if (data.hasOwnProperty('currencyOfTransfer')) {
                obj['currencyOfTransfer'] = ApiClient.convertToType(data['currencyOfTransfer'], 'String');
            }
            if (data.hasOwnProperty('exchangeRateInformation')) {
                obj['exchangeRateInformation'] = ExchangeRateInformation.constructFromObject(data['exchangeRateInformation']);
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ApiClient.convertToType(data['purpose'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = PriorityCodeEnum.constructFromObject(data['priority']);
            }
            if (data.hasOwnProperty('chargeBearer')) {
                obj['chargeBearer'] = ChargeBearerType.constructFromObject(data['chargeBearer']);
            }
        }
        return obj;
    }


}

/**
 * __Mandatory__. The 3-letter currency code for the currency of the payment to be transferred which can differ from the currency of the payer's account.
 * @member {String} currencyOfTransfer
 */
InternationalPaymentRequest.prototype['currencyOfTransfer'] = undefined;

/**
 * @member {module:model/ExchangeRateInformation} exchangeRateInformation
 */
InternationalPaymentRequest.prototype['exchangeRateInformation'] = undefined;

/**
 * __Optional__. Used to indicate the external purpose as a [ISO20022 purpose code](https://www.rba.hr/documents/20182/183267/External+purpose+codes+list/8a28f888-1f83-5e29-d6ed-fce05f428689?version=1.1) value.
 * @member {String} purpose
 */
InternationalPaymentRequest.prototype['purpose'] = undefined;

/**
 * @member {module:model/PriorityCodeEnum} priority
 */
InternationalPaymentRequest.prototype['priority'] = undefined;

/**
 * @member {module:model/ChargeBearerType} chargeBearer
 */
InternationalPaymentRequest.prototype['chargeBearer'] = undefined;






export default InternationalPaymentRequest;

