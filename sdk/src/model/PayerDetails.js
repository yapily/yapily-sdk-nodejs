/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountIdentification from './AccountIdentification';

/**
 * The PayerDetails model module.
 * @module model/PayerDetails
 * @version 2.13.1
 */
class PayerDetails {
    /**
     * Constructs a new <code>PayerDetails</code>.
     * __Conditional__. The &#x60;Payer&#x60; object contains details of the benefactor [person or business]. If you define this in your payment request, you mustdefine this along with all of the nested mandatory properties.&lt;ol&gt;     &lt;li&gt;The &#x60;Payer&#x60; object is mandatory along with its mandatory properties when the account of the benefactor is from an &#x60;Institution&#x60; in Europe.          See [Berlin Group](https://docs.yapily.com/pages/knowledge/open-banking/berlin_group/) for more information.&lt;/li&gt;     &lt;li&gt;The &#x60;Payer&#x60; should be specified if the &#x60;Payer&#x60; account is intended to be locked.&lt;/li&gt;&lt;/ol&gt;
     * @alias module:model/PayerDetails
     * @param accountIdentifications {Array.<module:model/AccountIdentification>} __Mandatory__. The account identifications that identify the `Payer` bank account.
     */
    constructor(accountIdentifications) { 
        
        PayerDetails.initialize(this, accountIdentifications);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountIdentifications) { 
        obj['accountIdentifications'] = accountIdentifications;
    }

    /**
     * Constructs a <code>PayerDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayerDetails} obj Optional instance to populate.
     * @return {module:model/PayerDetails} The populated <code>PayerDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayerDetails();

            if (data.hasOwnProperty('accountIdentifications')) {
                obj['accountIdentifications'] = ApiClient.convertToType(data['accountIdentifications'], [AccountIdentification]);
            }
        }
        return obj;
    }


}

/**
 * __Mandatory__. The account identifications that identify the `Payer` bank account.
 * @member {Array.<module:model/AccountIdentification>} accountIdentifications
 */
PayerDetails.prototype['accountIdentifications'] = undefined;






export default PayerDetails;

