/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import InternationalPaymentRequest from './InternationalPaymentRequest';
import Payee from './Payee';
import Payer from './Payer';
import PaymentContextType from './PaymentContextType';
import PaymentType from './PaymentType';
import PeriodicPaymentRequest from './PeriodicPaymentRequest';

/**
 * The PaymentRequest model module.
 * @module model/PaymentRequest
 * @version 2.13.1
 */
class PaymentRequest {
    /**
     * Constructs a new <code>PaymentRequest</code>.
     * __Mandatory__. The payment request object defining the details of the payment.
     * @alias module:model/PaymentRequest
     * @param paymentIdempotencyId {String} __Mandatory__. A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.
     * @param type {module:model/PaymentType} 
     * @param payee {module:model/Payee} 
     * @param amount {module:model/Amount} 
     */
    constructor(paymentIdempotencyId, type, payee, amount) { 
        
        PaymentRequest.initialize(this, paymentIdempotencyId, type, payee, amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, paymentIdempotencyId, type, payee, amount) { 
        obj['paymentIdempotencyId'] = paymentIdempotencyId;
        obj['type'] = type;
        obj['payee'] = payee;
        obj['amount'] = amount;
    }

    /**
     * Constructs a <code>PaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentRequest} obj Optional instance to populate.
     * @return {module:model/PaymentRequest} The populated <code>PaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentRequest();

            if (data.hasOwnProperty('paymentIdempotencyId')) {
                obj['paymentIdempotencyId'] = ApiClient.convertToType(data['paymentIdempotencyId'], 'String');
            }
            if (data.hasOwnProperty('payer')) {
                obj['payer'] = Payer.constructFromObject(data['payer']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('contextType')) {
                obj['contextType'] = PaymentContextType.constructFromObject(data['contextType']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = PaymentType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('payee')) {
                obj['payee'] = Payee.constructFromObject(data['payee']);
            }
            if (data.hasOwnProperty('periodicPayment')) {
                obj['periodicPayment'] = PeriodicPaymentRequest.constructFromObject(data['periodicPayment']);
            }
            if (data.hasOwnProperty('internationalPayment')) {
                obj['internationalPayment'] = InternationalPaymentRequest.constructFromObject(data['internationalPayment']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('paymentDateTime')) {
                obj['paymentDateTime'] = ApiClient.convertToType(data['paymentDateTime'], 'Date');
            }
            if (data.hasOwnProperty('readRefundAccount')) {
                obj['readRefundAccount'] = ApiClient.convertToType(data['readRefundAccount'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * __Mandatory__. A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.
 * @member {String} paymentIdempotencyId
 */
PaymentRequest.prototype['paymentIdempotencyId'] = undefined;

/**
 * @member {module:model/Payer} payer
 */
PaymentRequest.prototype['payer'] = undefined;

/**
 * __Optional__. The payment reference or description. Limited to a maximum of 18 characters long.
 * @member {String} reference
 */
PaymentRequest.prototype['reference'] = undefined;

/**
 * @member {module:model/PaymentContextType} contextType
 */
PaymentRequest.prototype['contextType'] = undefined;

/**
 * @member {module:model/PaymentType} type
 */
PaymentRequest.prototype['type'] = undefined;

/**
 * @member {module:model/Payee} payee
 */
PaymentRequest.prototype['payee'] = undefined;

/**
 * @member {module:model/PeriodicPaymentRequest} periodicPayment
 */
PaymentRequest.prototype['periodicPayment'] = undefined;

/**
 * @member {module:model/InternationalPaymentRequest} internationalPayment
 */
PaymentRequest.prototype['internationalPayment'] = undefined;

/**
 * @member {module:model/Amount} amount
 */
PaymentRequest.prototype['amount'] = undefined;

/**
 * __Conditional__. Used to specify the date of the payment when the payment type is one of the following:<ul>    <li><code>DOMESTIC_SCHEDULED_PAYMENT</code></li>    <li><code>DOMESTIC_PERIODIC_PAYMENT</code></li>    <li><code>INTERNATIONAL_SCHEDULED_PAYMENT</code></li>    <li><code>INTERNATIONAL_PERIODIC_PAYMENT</code></li></ul>
 * @member {Date} paymentDateTime
 */
PaymentRequest.prototype['paymentDateTime'] = undefined;

/**
 * __Optional__. Used to request the payer details in the payment response when the `Institution` provides the feature `READ_DOMESTIC_SINGLE_REFUND`.<br><br>See [Reverse Payments](https://docs.yapily.com/pages/knowledge/open-banking/reverse_payments/) for more information.
 * @member {Boolean} readRefundAccount
 */
PaymentRequest.prototype['readRefundAccount'] = undefined;






export default PaymentRequest;

