/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProfileConsent model module.
 * @module model/ProfileConsent
 * @version 2.13.1
 */
class ProfileConsent {
    /**
     * Constructs a new <code>ProfileConsent</code>.
     * Object returned when creating a User Profile.
     * @alias module:model/ProfileConsent
     */
    constructor() { 
        
        ProfileConsent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProfileConsent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProfileConsent} obj Optional instance to populate.
     * @return {module:model/ProfileConsent} The populated <code>ProfileConsent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProfileConsent();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('referenceConsentId')) {
                obj['referenceConsentId'] = ApiClient.convertToType(data['referenceConsentId'], 'String');
            }
            if (data.hasOwnProperty('institutionId')) {
                obj['institutionId'] = ApiClient.convertToType(data['institutionId'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('expiresAt')) {
                obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');
            }
            if (data.hasOwnProperty('dataInsertedAt')) {
                obj['dataInsertedAt'] = ApiClient.convertToType(data['dataInsertedAt'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * The id of the ProfileConsent
 * @member {String} id
 */
ProfileConsent.prototype['id'] = undefined;

/**
 * The status, can be PENDING, COMPLETED or ERROR.
 * @member {String} status
 */
ProfileConsent.prototype['status'] = undefined;

/**
 * The userUuid.
 * @member {String} userId
 */
ProfileConsent.prototype['userId'] = undefined;

/**
 * The referenceConsentId.
 * @member {String} referenceConsentId
 */
ProfileConsent.prototype['referenceConsentId'] = undefined;

/**
 * The id of the Institution.
 * @member {String} institutionId
 */
ProfileConsent.prototype['institutionId'] = undefined;

/**
 * When a profile consent is created.
 * @member {Date} createdAt
 */
ProfileConsent.prototype['createdAt'] = undefined;

/**
 * When a profile consent is expired after created + X.
 * @member {Date} expiresAt
 */
ProfileConsent.prototype['expiresAt'] = undefined;

/**
 * After data retrieval from aggregated profile consent is completed.
 * @member {Date} dataInsertedAt
 */
ProfileConsent.prototype['dataInsertedAt'] = undefined;






export default ProfileConsent;

