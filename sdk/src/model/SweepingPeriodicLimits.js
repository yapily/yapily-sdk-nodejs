/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The SweepingPeriodicLimits model module.
 * @module model/SweepingPeriodicLimits
 * @version 2.13.1
 */
class SweepingPeriodicLimits {
    /**
     * Constructs a new <code>SweepingPeriodicLimits</code>.
     * @alias module:model/SweepingPeriodicLimits
     * @param totalMaxAmount {module:model/Amount} __Mandatory__. Maximum amount that can be specified in all payment instructions in a given period under this VRP consent. If the Alignment is Calendar, the limit is pro-rated in the first period to the remaining number of days.
     * @param frequency {String} __Mandatory__. Frequency for which the payment limits are enforced. Allowed values are [DAILY, WEEKLY, FORTNIGHTLY, MONTHLY, YEARLY].
     * @param alignment {String} __Mandatory__. Period alignment for which the payment limits are enforced. Allowed values are [CONSENT, CALENDAR]. If CONSENT, then period starts on consent creation date. If CALENDAR, then period lines up with the frequency e.g. WEEKLY period will begin at start of the week in question.
     */
    constructor(totalMaxAmount, frequency, alignment) { 
        
        SweepingPeriodicLimits.initialize(this, totalMaxAmount, frequency, alignment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, totalMaxAmount, frequency, alignment) { 
        obj['totalMaxAmount'] = totalMaxAmount;
        obj['frequency'] = frequency;
        obj['alignment'] = alignment;
    }

    /**
     * Constructs a <code>SweepingPeriodicLimits</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SweepingPeriodicLimits} obj Optional instance to populate.
     * @return {module:model/SweepingPeriodicLimits} The populated <code>SweepingPeriodicLimits</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SweepingPeriodicLimits();

            if (data.hasOwnProperty('totalMaxAmount')) {
                obj['totalMaxAmount'] = ApiClient.convertToType(data['totalMaxAmount'], Amount);
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('alignment')) {
                obj['alignment'] = ApiClient.convertToType(data['alignment'], 'String');
            }
        }
        return obj;
    }


}

/**
 * __Mandatory__. Maximum amount that can be specified in all payment instructions in a given period under this VRP consent. If the Alignment is Calendar, the limit is pro-rated in the first period to the remaining number of days.
 * @member {module:model/Amount} totalMaxAmount
 */
SweepingPeriodicLimits.prototype['totalMaxAmount'] = undefined;

/**
 * __Mandatory__. Frequency for which the payment limits are enforced. Allowed values are [DAILY, WEEKLY, FORTNIGHTLY, MONTHLY, YEARLY].
 * @member {String} frequency
 */
SweepingPeriodicLimits.prototype['frequency'] = undefined;

/**
 * __Mandatory__. Period alignment for which the payment limits are enforced. Allowed values are [CONSENT, CALENDAR]. If CONSENT, then period starts on consent creation date. If CALENDAR, then period lines up with the frequency e.g. WEEKLY period will begin at start of the week in question.
 * @member {String} alignment
 */
SweepingPeriodicLimits.prototype['alignment'] = undefined;






export default SweepingPeriodicLimits;

