/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressDetails from './AddressDetails';
import Amount from './Amount';
import CurrencyExchange from './CurrencyExchange';
import Enrichment from './Enrichment';
import IsoBankTransactionCode from './IsoBankTransactionCode';
import Merchant from './Merchant';
import Payee from './Payee';
import Payer from './Payer';
import ProprietaryBankTransactionCode from './ProprietaryBankTransactionCode';
import StatementReference from './StatementReference';
import TransactionBalance from './TransactionBalance';
import TransactionChargeDetails from './TransactionChargeDetails';
import TransactionStatusEnum from './TransactionStatusEnum';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 2.13.1
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('bookingDateTime')) {
                obj['bookingDateTime'] = ApiClient.convertToType(data['bookingDateTime'], 'Date');
            }
            if (data.hasOwnProperty('valueDateTime')) {
                obj['valueDateTime'] = ApiClient.convertToType(data['valueDateTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TransactionStatusEnum.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('transactionAmount')) {
                obj['transactionAmount'] = Amount.constructFromObject(data['transactionAmount']);
            }
            if (data.hasOwnProperty('grossAmount')) {
                obj['grossAmount'] = Amount.constructFromObject(data['grossAmount']);
            }
            if (data.hasOwnProperty('currencyExchange')) {
                obj['currencyExchange'] = CurrencyExchange.constructFromObject(data['currencyExchange']);
            }
            if (data.hasOwnProperty('chargeDetails')) {
                obj['chargeDetails'] = TransactionChargeDetails.constructFromObject(data['chargeDetails']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('statementReferences')) {
                obj['statementReferences'] = ApiClient.convertToType(data['statementReferences'], [StatementReference]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('transactionInformation')) {
                obj['transactionInformation'] = ApiClient.convertToType(data['transactionInformation'], ['String']);
            }
            if (data.hasOwnProperty('addressDetails')) {
                obj['addressDetails'] = AddressDetails.constructFromObject(data['addressDetails']);
            }
            if (data.hasOwnProperty('isoBankTransactionCode')) {
                obj['isoBankTransactionCode'] = IsoBankTransactionCode.constructFromObject(data['isoBankTransactionCode']);
            }
            if (data.hasOwnProperty('proprietaryBankTransactionCode')) {
                obj['proprietaryBankTransactionCode'] = ProprietaryBankTransactionCode.constructFromObject(data['proprietaryBankTransactionCode']);
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = TransactionBalance.constructFromObject(data['balance']);
            }
            if (data.hasOwnProperty('payeeDetails')) {
                obj['payeeDetails'] = Payee.constructFromObject(data['payeeDetails']);
            }
            if (data.hasOwnProperty('payerDetails')) {
                obj['payerDetails'] = Payer.constructFromObject(data['payerDetails']);
            }
            if (data.hasOwnProperty('merchant')) {
                obj['merchant'] = Merchant.constructFromObject(data['merchant']);
            }
            if (data.hasOwnProperty('enrichment')) {
                obj['enrichment'] = Enrichment.constructFromObject(data['enrichment']);
            }
            if (data.hasOwnProperty('supplementaryData')) {
                obj['supplementaryData'] = ApiClient.convertToType(data['supplementaryData'], Object);
            }
            if (data.hasOwnProperty('transactionMutability')) {
                obj['transactionMutability'] = ApiClient.convertToType(data['transactionMutability'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
Transaction.prototype['id'] = undefined;

/**
 * @member {Date} date
 */
Transaction.prototype['date'] = undefined;

/**
 * @member {Date} bookingDateTime
 */
Transaction.prototype['bookingDateTime'] = undefined;

/**
 * @member {Date} valueDateTime
 */
Transaction.prototype['valueDateTime'] = undefined;

/**
 * @member {module:model/TransactionStatusEnum} status
 */
Transaction.prototype['status'] = undefined;

/**
 * @member {Number} amount
 */
Transaction.prototype['amount'] = undefined;

/**
 * @member {String} currency
 */
Transaction.prototype['currency'] = undefined;

/**
 * @member {module:model/Amount} transactionAmount
 */
Transaction.prototype['transactionAmount'] = undefined;

/**
 * @member {module:model/Amount} grossAmount
 */
Transaction.prototype['grossAmount'] = undefined;

/**
 * @member {module:model/CurrencyExchange} currencyExchange
 */
Transaction.prototype['currencyExchange'] = undefined;

/**
 * @member {module:model/TransactionChargeDetails} chargeDetails
 */
Transaction.prototype['chargeDetails'] = undefined;

/**
 * @member {String} reference
 */
Transaction.prototype['reference'] = undefined;

/**
 * @member {Array.<module:model/StatementReference>} statementReferences
 */
Transaction.prototype['statementReferences'] = undefined;

/**
 * @member {String} description
 */
Transaction.prototype['description'] = undefined;

/**
 * @member {Array.<String>} transactionInformation
 */
Transaction.prototype['transactionInformation'] = undefined;

/**
 * @member {module:model/AddressDetails} addressDetails
 */
Transaction.prototype['addressDetails'] = undefined;

/**
 * @member {module:model/IsoBankTransactionCode} isoBankTransactionCode
 */
Transaction.prototype['isoBankTransactionCode'] = undefined;

/**
 * @member {module:model/ProprietaryBankTransactionCode} proprietaryBankTransactionCode
 */
Transaction.prototype['proprietaryBankTransactionCode'] = undefined;

/**
 * @member {module:model/TransactionBalance} balance
 */
Transaction.prototype['balance'] = undefined;

/**
 * @member {module:model/Payee} payeeDetails
 */
Transaction.prototype['payeeDetails'] = undefined;

/**
 * @member {module:model/Payer} payerDetails
 */
Transaction.prototype['payerDetails'] = undefined;

/**
 * @member {module:model/Merchant} merchant
 */
Transaction.prototype['merchant'] = undefined;

/**
 * @member {module:model/Enrichment} enrichment
 */
Transaction.prototype['enrichment'] = undefined;

/**
 * @member {Object} supplementaryData
 */
Transaction.prototype['supplementaryData'] = undefined;

/**
 * __Optional__. Specifies the Mutability of the Transaction record.<ul><li>A transaction with a `Status` of `Pending` is mutable.</li><li>A transaction with a `Status` of `Booked` where the `TransactionMutability` flag is not specified is not guaranteed to be immutable (although in most instances it will be).</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Immutable` is immutable.</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Mutable` is mutable.</li></ul>
 * @member {String} transactionMutability
 */
Transaction.prototype['transactionMutability'] = undefined;






export default Transaction;

