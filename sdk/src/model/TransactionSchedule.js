/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransactionSchedule model module.
 * @module model/TransactionSchedule
 * @version 2.13.1
 */
class TransactionSchedule {
    /**
     * Constructs a new <code>TransactionSchedule</code>.
     * Part of a financial profile for a User.
     * @alias module:model/TransactionSchedule
     */
    constructor() { 
        
        TransactionSchedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionSchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionSchedule} obj Optional instance to populate.
     * @return {module:model/TransactionSchedule} The populated <code>TransactionSchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionSchedule();

            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('detailedFrequency')) {
                obj['detailedFrequency'] = ApiClient.convertToType(data['detailedFrequency'], 'String');
            }
            if (data.hasOwnProperty('detailedFrequencyParameter')) {
                obj['detailedFrequencyParameter'] = ApiClient.convertToType(data['detailedFrequencyParameter'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * How often the transaction happens.  Can be 'Monthly', 'Twice monthly', 'Every two weeks', 'Every four weeks', 'Daily', 'Weekly', 'Every weekday', 'Twice daily', 'Twice every weekday'
 * @member {String} frequency
 */
TransactionSchedule.prototype['frequency'] = undefined;

/**
 * When in the cycle the transaction occurs.  Can be 'Daily', 'Twice daily', 'Twice every weekday', 'Every weekday', 'Weekly on day n', 'Every two weeks on day n', 'Monthly on working day before day n of month', 'Monthly on last working day of month', 'Twice a month on 15th and last working day of month', 'Every four weeks on day n'
 * @member {String} detailedFrequency
 */
TransactionSchedule.prototype['detailedFrequency'] = undefined;

/**
 * The n in detailedFrequency where there is one - for week-based frequencies, an integer from 0 to 6 where 0 is Monday or for month-based frequencies, an integer from 0 to 27 where 0 is the first day of the month
 * @member {Number} detailedFrequencyParameter
 */
TransactionSchedule.prototype['detailedFrequencyParameter'] = undefined;






export default TransactionSchedule;

