/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VirtualAccountBeneficiaryAccount from './VirtualAccountBeneficiaryAccount';
import VirtualAccountBeneficiaryAddress from './VirtualAccountBeneficiaryAddress';

/**
 * The VirtualAccountBeneficiary model module.
 * @module model/VirtualAccountBeneficiary
 * @version 2.13.1
 */
class VirtualAccountBeneficiary {
    /**
     * Constructs a new <code>VirtualAccountBeneficiary</code>.
     * @alias module:model/VirtualAccountBeneficiary
     */
    constructor() { 
        
        VirtualAccountBeneficiary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualAccountBeneficiary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualAccountBeneficiary} obj Optional instance to populate.
     * @return {module:model/VirtualAccountBeneficiary} The populated <code>VirtualAccountBeneficiary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualAccountBeneficiary();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('paymentSchemes')) {
                obj['paymentSchemes'] = ApiClient.convertToType(data['paymentSchemes'], ['String']);
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('birthDate')) {
                obj['birthDate'] = ApiClient.convertToType(data['birthDate'], 'Date');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = VirtualAccountBeneficiaryAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = VirtualAccountBeneficiaryAccount.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Unique id of the Beneficiary
 * @member {String} id
 */
VirtualAccountBeneficiary.prototype['id'] = undefined;

/**
 * Beneficiary payment schemes
 * @member {Array.<String>} paymentSchemes
 */
VirtualAccountBeneficiary.prototype['paymentSchemes'] = undefined;

/**
 * Reference that can be provided in order to help with identification of the Beneficiary
 * @member {String} nickname
 */
VirtualAccountBeneficiary.prototype['nickname'] = undefined;

/**
 * Indicates the type of Beneficiary as either a INDIVIDUAL or BUSINESS
 * @member {String} type
 */
VirtualAccountBeneficiary.prototype['type'] = undefined;

/**
 * @member {String} name
 */
VirtualAccountBeneficiary.prototype['name'] = undefined;

/**
 * @member {Date} birthDate
 */
VirtualAccountBeneficiary.prototype['birthDate'] = undefined;

/**
 * @member {module:model/VirtualAccountBeneficiaryAddress} address
 */
VirtualAccountBeneficiary.prototype['address'] = undefined;

/**
 * @member {module:model/VirtualAccountBeneficiaryAccount} account
 */
VirtualAccountBeneficiary.prototype['account'] = undefined;

/**
 * The current status of the Beneficiary <br> PENDING - Beneficiary is awaiting verification <br> ACTIVE - Beneficiary can be used in a Pay Out <br> BLOCKED - Beneficiary cannot be used in a Pay Out
 * @member {String} status
 */
VirtualAccountBeneficiary.prototype['status'] = undefined;






export default VirtualAccountBeneficiary;

