/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The VirtualAccountPayOutRequest model module.
 * @module model/VirtualAccountPayOutRequest
 * @version 2.13.1
 */
class VirtualAccountPayOutRequest {
    /**
     * Constructs a new <code>VirtualAccountPayOutRequest</code>.
     * @alias module:model/VirtualAccountPayOutRequest
     * @param accountId {String} Unique id of the source / payer account
     * @param amount {module:model/Amount} 
     * @param reference {String} Reference to be associated with the payment. This will be appear on the beneficiary's bank statement
     * @param beneficiaryId {String} Unique id of the beneficiary to whom the payment will be made
     * @param paymentScheme {String} Method of settlement to complete the payment. One of: <br> FASTER_PAYMENTS <br> SEPA_CREDIT <br> SEPA_INSTANT <br> SWIFT <br> SWIFT_EXPRESS <br> CHAPS <br> IAT <br> WIRE
     */
    constructor(accountId, amount, reference, beneficiaryId, paymentScheme) { 
        
        VirtualAccountPayOutRequest.initialize(this, accountId, amount, reference, beneficiaryId, paymentScheme);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, amount, reference, beneficiaryId, paymentScheme) { 
        obj['accountId'] = accountId;
        obj['amount'] = amount;
        obj['reference'] = reference;
        obj['beneficiaryId'] = beneficiaryId;
        obj['paymentScheme'] = paymentScheme;
    }

    /**
     * Constructs a <code>VirtualAccountPayOutRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualAccountPayOutRequest} obj Optional instance to populate.
     * @return {module:model/VirtualAccountPayOutRequest} The populated <code>VirtualAccountPayOutRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualAccountPayOutRequest();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], Amount);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('beneficiaryId')) {
                obj['beneficiaryId'] = ApiClient.convertToType(data['beneficiaryId'], 'String');
            }
            if (data.hasOwnProperty('paymentScheme')) {
                obj['paymentScheme'] = ApiClient.convertToType(data['paymentScheme'], 'String');
            }
            if (data.hasOwnProperty('paymentDate')) {
                obj['paymentDate'] = ApiClient.convertToType(data['paymentDate'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * Unique id of the source / payer account
 * @member {String} accountId
 */
VirtualAccountPayOutRequest.prototype['accountId'] = undefined;

/**
 * @member {module:model/Amount} amount
 */
VirtualAccountPayOutRequest.prototype['amount'] = undefined;

/**
 * Reference to be associated with the payment. This will be appear on the beneficiary's bank statement
 * @member {String} reference
 */
VirtualAccountPayOutRequest.prototype['reference'] = undefined;

/**
 * Unique id of the beneficiary to whom the payment will be made
 * @member {String} beneficiaryId
 */
VirtualAccountPayOutRequest.prototype['beneficiaryId'] = undefined;

/**
 * Method of settlement to complete the payment. One of: <br> FASTER_PAYMENTS <br> SEPA_CREDIT <br> SEPA_INSTANT <br> SWIFT <br> SWIFT_EXPRESS <br> CHAPS <br> IAT <br> WIRE
 * @member {String} paymentScheme
 */
VirtualAccountPayOutRequest.prototype['paymentScheme'] = undefined;

/**
 * Date on which a payment instruction will be executed, that must be in the future
 * @member {Date} paymentDate
 */
VirtualAccountPayOutRequest.prototype['paymentDate'] = undefined;






export default VirtualAccountPayOutRequest;

