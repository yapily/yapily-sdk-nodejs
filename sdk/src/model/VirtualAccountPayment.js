/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import VirtualAccountPaymentDestination from './VirtualAccountPaymentDestination';
import VirtualAccountPaymentSource from './VirtualAccountPaymentSource';

/**
 * The VirtualAccountPayment model module.
 * @module model/VirtualAccountPayment
 * @version 2.13.1
 */
class VirtualAccountPayment {
    /**
     * Constructs a new <code>VirtualAccountPayment</code>.
     * @alias module:model/VirtualAccountPayment
     */
    constructor() { 
        
        VirtualAccountPayment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualAccountPayment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualAccountPayment} obj Optional instance to populate.
     * @return {module:model/VirtualAccountPayment} The populated <code>VirtualAccountPayment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualAccountPayment();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('createdDateTime')) {
                obj['createdDateTime'] = ApiClient.convertToType(data['createdDateTime'], 'Date');
            }
            if (data.hasOwnProperty('paymentDate')) {
                obj['paymentDate'] = ApiClient.convertToType(data['paymentDate'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('paymentScheme')) {
                obj['paymentScheme'] = ApiClient.convertToType(data['paymentScheme'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], Amount);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = VirtualAccountPaymentSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = VirtualAccountPaymentDestination.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('originalPaymentId')) {
                obj['originalPaymentId'] = ApiClient.convertToType(data['originalPaymentId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Unique id of the payment
 * @member {String} id
 */
VirtualAccountPayment.prototype['id'] = undefined;

/**
 * Date and time that the payment was created
 * @member {Date} createdDateTime
 */
VirtualAccountPayment.prototype['createdDateTime'] = undefined;

/**
 * Date on which the payment instruction will be executed, that may be in the future
 * @member {Date} paymentDate
 */
VirtualAccountPayment.prototype['paymentDate'] = undefined;

/**
 * Type of payment. One of PAY_IN, PAY_OUT, RETURN_IN or RETURN_OUT
 * @member {String} type
 */
VirtualAccountPayment.prototype['type'] = undefined;

/**
 * Method of settlement to complete the payment. One of: <br> FASTER_PAYMENTS <br> SEPA_CREDIT <br> SEPA_INSTANT <br> SWIFT <br> SWIFT_EXPRESS <br> CHAPS <br> IAT <br> WIRE
 * @member {String} paymentScheme
 */
VirtualAccountPayment.prototype['paymentScheme'] = undefined;

/**
 * @member {module:model/Amount} amount
 */
VirtualAccountPayment.prototype['amount'] = undefined;

/**
 * Reference to be associated with the payment. This will be appear on the beneficiary's bank statement
 * @member {String} reference
 */
VirtualAccountPayment.prototype['reference'] = undefined;

/**
 * The current state of the transaction <br> INITIATED - The transaction request is acknowledged and will not undergo validation checks <br> PROCESSING - Initial checks succeeded and the transaction request is now being processed <br> COMPLETED - The transaction has been successfully processed (terminal status) <br> FAILED - An failure occured during transaction processing (terminal status)
 * @member {String} status
 */
VirtualAccountPayment.prototype['status'] = undefined;

/**
 * @member {module:model/VirtualAccountPaymentSource} source
 */
VirtualAccountPayment.prototype['source'] = undefined;

/**
 * @member {module:model/VirtualAccountPaymentDestination} destination
 */
VirtualAccountPayment.prototype['destination'] = undefined;

/**
 * Unique id of the original payment that was refunded
 * @member {String} originalPaymentId
 */
VirtualAccountPayment.prototype['originalPaymentId'] = undefined;






export default VirtualAccountPayment;

