/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import VirtualAccountTransferDestination from './VirtualAccountTransferDestination';
import VirtualAccountTransferSource from './VirtualAccountTransferSource';

/**
 * The VirtualAccountTransferRequest model module.
 * @module model/VirtualAccountTransferRequest
 * @version 2.13.1
 */
class VirtualAccountTransferRequest {
    /**
     * Constructs a new <code>VirtualAccountTransferRequest</code>.
     * @alias module:model/VirtualAccountTransferRequest
     * @param amount {module:model/Amount} 
     * @param reference {String} Reference to be associated with the transfer. This will be appear on the destination's bank statement
     * @param source {module:model/VirtualAccountTransferSource} 
     * @param destination {module:model/VirtualAccountTransferDestination} 
     */
    constructor(amount, reference, source, destination) { 
        
        VirtualAccountTransferRequest.initialize(this, amount, reference, source, destination);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, reference, source, destination) { 
        obj['amount'] = amount;
        obj['reference'] = reference;
        obj['source'] = source;
        obj['destination'] = destination;
    }

    /**
     * Constructs a <code>VirtualAccountTransferRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualAccountTransferRequest} obj Optional instance to populate.
     * @return {module:model/VirtualAccountTransferRequest} The populated <code>VirtualAccountTransferRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualAccountTransferRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], Amount);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = VirtualAccountTransferSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = VirtualAccountTransferDestination.constructFromObject(data['destination']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Amount} amount
 */
VirtualAccountTransferRequest.prototype['amount'] = undefined;

/**
 * Reference to be associated with the transfer. This will be appear on the destination's bank statement
 * @member {String} reference
 */
VirtualAccountTransferRequest.prototype['reference'] = undefined;

/**
 * @member {module:model/VirtualAccountTransferSource} source
 */
VirtualAccountTransferRequest.prototype['source'] = undefined;

/**
 * @member {module:model/VirtualAccountTransferDestination} destination
 */
VirtualAccountTransferRequest.prototype['destination'] = undefined;






export default VirtualAccountTransferRequest;

