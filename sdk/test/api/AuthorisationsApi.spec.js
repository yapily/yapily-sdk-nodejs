/**
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YapilyApi);
  }
}(this, function(expect, YapilyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new YapilyApi.AuthorisationsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AuthorisationsApi', function() {
    describe('createBulkPaymentAuthorisation', function() {
      it('should call createBulkPaymentAuthorisation successfully', function(done) {
        //uncomment below and update the code to test createBulkPaymentAuthorisation
        //instance.createBulkPaymentAuthorisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEmbeddedBulkPaymentAuthorisation', function() {
      it('should call createEmbeddedBulkPaymentAuthorisation successfully', function(done) {
        //uncomment below and update the code to test createEmbeddedBulkPaymentAuthorisation
        //instance.createEmbeddedBulkPaymentAuthorisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEmbeddedPaymentAuthorisation', function() {
      it('should call createEmbeddedPaymentAuthorisation successfully', function(done) {
        //uncomment below and update the code to test createEmbeddedPaymentAuthorisation
        //instance.createEmbeddedPaymentAuthorisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPaymentAuthorisation', function() {
      it('should call createPaymentAuthorisation successfully', function(done) {
        //uncomment below and update the code to test createPaymentAuthorisation
        //instance.createPaymentAuthorisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPaymentPreAuthorisationRequest', function() {
      it('should call createPaymentPreAuthorisationRequest successfully', function(done) {
        //uncomment below and update the code to test createPaymentPreAuthorisationRequest
        //instance.createPaymentPreAuthorisationRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPreAuthorisationRequest', function() {
      it('should call createPreAuthorisationRequest successfully', function(done) {
        //uncomment below and update the code to test createPreAuthorisationRequest
        //instance.createPreAuthorisationRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateAccountRequest', function() {
      it('should call initiateAccountRequest successfully', function(done) {
        //uncomment below and update the code to test initiateAccountRequest
        //instance.initiateAccountRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateEmbeddedAccountRequest', function() {
      it('should call initiateEmbeddedAccountRequest successfully', function(done) {
        //uncomment below and update the code to test initiateEmbeddedAccountRequest
        //instance.initiateEmbeddedAccountRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reAuthoriseAccount', function() {
      it('should call reAuthoriseAccount successfully', function(done) {
        //uncomment below and update the code to test reAuthoriseAccount
        //instance.reAuthoriseAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEmbeddedAccountRequest', function() {
      it('should call updateEmbeddedAccountRequest successfully', function(done) {
        //uncomment below and update the code to test updateEmbeddedAccountRequest
        //instance.updateEmbeddedAccountRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEmbeddedBulkPaymentAuthorisation', function() {
      it('should call updateEmbeddedBulkPaymentAuthorisation successfully', function(done) {
        //uncomment below and update the code to test updateEmbeddedBulkPaymentAuthorisation
        //instance.updateEmbeddedBulkPaymentAuthorisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEmbeddedPaymentAuthorisation', function() {
      it('should call updateEmbeddedPaymentAuthorisation successfully', function(done) {
        //uncomment below and update the code to test updateEmbeddedPaymentAuthorisation
        //instance.updateEmbeddedPaymentAuthorisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePaymentAuthorisation', function() {
      it('should call updatePaymentAuthorisation successfully', function(done) {
        //uncomment below and update the code to test updatePaymentAuthorisation
        //instance.updatePaymentAuthorisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePreAuthoriseAccountConsent', function() {
      it('should call updatePreAuthoriseAccountConsent successfully', function(done) {
        //uncomment below and update the code to test updatePreAuthoriseAccountConsent
        //instance.updatePreAuthoriseAccountConsent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
